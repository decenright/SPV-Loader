@model SPV_Loader.Models.AthenaViewModel
@using System.Linq
@{
    ViewBag.Title = "Index";

    bool isProcessingCompleted = false;
    if (TempData["allItemsProcessed"] != null && (bool)TempData["allItemsProcessed"])
    {
        isProcessingCompleted = true;
    }

    int currentIndex = ViewBag.CurrentIndex != null ? (int)ViewBag.CurrentIndex : 0;

    // Using LINQ Count() for IEnumerable
    var athenaList = Model.AthenaList.ToList(); // Converts to a List for easier access if needed
}


<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
<link rel="stylesheet" href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>

<script>
    $(function () {
        $("#slider").slider({
            range: "min",
            value: 0,
            min: 0,
            max: 1,
            slide: function (event, ui) {
                updateSliderValue(ui.value);
            },
            stop: function (event, ui) {
                updateSliderValue(ui.value);
                $("#slider-value-input").val($("#slider-value").text());
            }
        });

        // Set the initial value to 'Marketing'
        updateSliderValue(0);
    });

    function updateSliderValue(value) {
        var sliderValue = value === 0 ? 'IsNotDach' : 'IsDach';
        $("#slider-value").text(sliderValue);
        var textAlignment = value === 0 ? 'left' : 'right';
        $("#slider-value").css('text-align', textAlignment);
    }
</script>

<script>
    function bs_input_file() {
        $(".input-file").before(
            function () {
                if (!$(this).prev().hasClass('input-ghost')) {
                    var element = $("<input type='file' id='dataFile' name='upload' class='input-ghost' style='visibility:hidden; height:0'>");
                    element.attr("name", $(this).attr("name"));
                    element.change(function () {
                        element.next(element).find('input').val((element.val()).split('\\').pop());
                    });
                    $(this).find("button.btn-choose").click(function () {
                        element.click();
                    });
                    $(this).find("button.btn-reset").click(function () {
                        element.val(null);
                        $(this).parents(".input-file").find('input').val('');
                    });
                    $(this).find('input').css("cursor", "pointer");
                    $(this).find('input').mousedown(function () {
                        $(this).parents('.input-file').prev().click();
                        return false;
                    });
                    return element;
                }
            }
        );
    }

    function clear() {
        var input = $("#dataFile").val('');
    };
    $(function () {
        clear();
        bs_input_file();
    });
</script>

@if (!isProcessingCompleted)
{
    <div class="grid-container">
        <!-- ImportOrder -->
        <div class="grid-item">
            @using (Html.BeginForm("ImportOrder", "ImportOrder", null, FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                @Html.AntiForgeryToken()
                @Html.HiddenFor(m => m.IsDach)

                <table>
                    <tr>
                        <td style="float:left">
                            <h4><strong>XML file from Tharstern</strong></h4>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <input type="file" name="postedFile" />
                        </td>
                        <td>
                            <input type="submit" id="btn_Upload" value="LOAD" aria-label="Load" class="btn btn-success" />
                        </td>
                        <td>
                            @Html.ValidationSummary()
                            @TempData["errorMessage"]
                        </td>
                    </tr>
                    @if (Model?.IsDach == false)
                    {
                        <tr>
                            <td colspan="3">
                                <div id="slider" style="width: 100px; margin-top: 20px;"></div>
                                <input type="hidden" id="slider-value-input" name="sliderValue" />
                                <p style="text-align: left; margin-top: 10px;"><span id="slider-value" style="display: inline-block;"></span></p>
                            </td>
                        </tr>
                    }
                </table>
            }
        </div>

        <!-- ImportIntel -->
        @if (Model?.AthenaDetails?.EndCustomer?.ToString().ToUpper() == "INTEL SECURITY")
        {
            <div class="grid-item">
                @using (Html.BeginForm("ImportIntel", "ImportOrder", null, FormMethod.Post, new { enctype = "multipart/form-data" }))
                {
                    @Html.AntiForgeryToken()

                    <table>
                        <tr>
                            <td style="float:left">
                                <h4><strong>Intel Launch file</strong></h4>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <input type="file" name="postedFile" />
                            </td>
                            <td>
                                <input type="submit" id="btn_Upload_Intel" value="LOAD" aria-label="Load" class="btn btn-success" />
                            </td>
                            <td>
                                @Html.ValidationSummary()
                                @TempData["errorMessage"]
                            </td>
                        </tr>
                    </table>
                }
            </div>
        }

        <!-- ImportDLC -->
        @if (Model?.AthenaDetails?.ActivationSystem?.ToString() == "DLC")
        {
            <div class="grid-item">
                @using (Html.BeginForm("ImportDLC", "ImportOrder", null, FormMethod.Post, new { enctype = "multipart/form-data" }))
                {
                    <table>
                        <tr>
                            <td style="float:left">
                                <h4><strong>Load Excel File</strong></h4>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <input type="file" name="postedFile" />
                            </td>
                            <td>
                                <input type="submit" id="btn_Upload_DLC" value="LOAD" aria-label="Load" class="btn btn-success"/>
                            </td>
                            <td>
                                @Html.ValidationSummary()
                                @TempData["errorMessage"]
                            </td>
                        </tr>
                    </table>
                }
            </div>
        }

        <!-- ImportCR80 -->
        @if (Model?.AthenaDetails?.ActivationSystem?.ToString() == "CR80")
        {
            <div class="grid-item">
                @using (Html.BeginForm("ImportCR80", "ImportOrder", null, FormMethod.Post, new { enctype = "multipart/form-data" }))
                {
                    <table>
                        <tr>
                            <td style="float:left">
                                <h4><strong>Load Excel File</strong></h4>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <input type="file" name="postedFile" />
                            </td>
                            <td>
                                <input type="submit" id="btn_Upload_CR80" value="Upload" aria-label="Load" />
                            </td>
                            <td>
                                @Html.ValidationSummary()
                                @TempData["errorMessage"]
                            </td>
                        </tr>
                    </table>
                }
            </div>
        }

        <!-- BLACKHAWK INDIRECT -->
        @if (Model?.AthenaDetails?.IntegratorID?.ToUpper() == "BLACKHAWK" && Model?.AthenaDetails?.Channel?.ToUpper() == "INDIRECT" && Model.ExportAthena.BHNPONumber == null)
        {
            <div class="grid-item">
                @using (Html.BeginForm("ImportBlackhawk", "ImportOrder", null, FormMethod.Post, new { enctype = "multipart/form-data" }))
                {
                    <table>
                        <tr>
                            <td style="float:left">
                                <h4><strong>Blackawk Work Instructions</strong></h4>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <input type="file" name="postedFile" />
                            </td>
                            <td>
                                <input type="submit" id="btn_Upload_Blackhawk" value="Upload" aria-label="Load" />
                            </td>
                            <td>
                                @Html.ValidationSummary()
                                @TempData["errorMessage"]
                            </td>
                        </tr>
                    </table>
                }
            </div>
        }

        <!-- Static Information Section -->
        <div class="grid-item info-section">
            <table>
                <tr>
                    <td>
                        <p style="float:left"><strong>Integrator:</strong></p>
                    </td>
                    <td>
                        <p style="padding-left:5px">@TempData["IntegratorId"]</p>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p style="float:left"><strong>Channel:</strong></p>
                    </td>
                    <td>
                        <p style="padding-left:5px">@TempData["Channel"]</p>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p style="float:left"><strong>PO Line:</strong></p>
                    </td>
                    <td>
                        <p style="padding-left:5px">@TempData["POline"]</p>
                    </td>
                </tr>
            </table>
            <input type="button" style="float:left" value="Clear All" onclick="location.href='@Url.Action("New", "Athena")'" />
        </div>
    </div>
    <br />
    <div class="table-container">
        <table class="table table-striped table-bordered">
            <thead>
                <tr>
                    <th style="min-width: 50px; white-space: nowrap; width: 50px">Id</th>
                    <th style="min-width: 50px; white-space: nowrap; width: 70px">Line</th>
                    <th style="min-width: 100px; white-space: nowrap; width: 70px">Job</th>
                    <th style="min-width: 100px; white-space: nowrap; width: 80px">Job Qty</th>
                    <th style="min-width: 150px; white-space: nowrap; width: 140px">Customer</th>
                    <th style="min-width: 150px; white-space: nowrap; width: 220px">Product Type</th>
                    <th style="min-width: 120px; white-space: nowrap; width: 200px">Sku</th>
                    <th style="min-width: 120px; white-space: nowrap; width: 100px">ERP</th>
                    <th style="min-width: 120px; white-space: nowrap; width: 100px">ASCM Id</th>
                    <th style="min-width: 120px; white-space: nowrap; width: 150px">Due Date</th>
                    <th style="min-width: 150px; white-space: nowrap; width: 100px">PO</th>
                    <th style="min-width: 100px; white-space: nowrap; width: 70px">SO</th>
                    <th style="min-width: 100px; white-space: nowrap; width: 130px">Customer Code</th>
                    <th style="min-width: 100px; white-space: nowrap; width: 100px">Activation</th>
                    <th style="min-width: 100px; white-space: nowrap; width: 130px">Part Id</th>
                    <th style="min-width: 150px; white-space: nowrap; width: 140px">Activation Type</th>
                    <th style="min-width: 150px; white-space: nowrap; width: 130px">Retail Barcode</th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < athenaList.Count(); i++) // Loop through the first 4 rows
                {
                    var item = athenaList[i];

                    // Ensure isHighlighted is comparing integer types correctly
                    var isHighlighted = i == currentIndex;

                    // Apply a class or inline style to the current row based on the condition
                    string rowStyle = isHighlighted ? "background-color: #90EE90;" : "";

                    // Assign an ID to each row to keep it in focus
                    string rowId = $"row-{i}";

                    <tr id="@rowId" style="@rowStyle">
                        <td>@item.Id</td>
                        <td>@item.PurchaseOrderLine</td>
                        <td>@item.JobNumber</td>
                        <td>@item.JobQuantity</td>
                        <td>@item.EndCustomer</td>
                        <td>@item.ProductType</td>
                        <td>@item.PartNumberSku</td>
                        <td>@item.ErpMaterialCode</td>
                        <td>@item.AscmOrderId</td>
                        <td>@item.DueDate.ToString()</td>
                        <td>@item.PurchaseOrderNumber</td>
                        <td>@item.SalesOrderNumber</td>
                        <td>@item.CustomerAccountCode</td>
                        <td>@item.ActivationSystem</td>
                        <td>@item.IntegratorPartID</td>
                        <td>@item.ActivationType</td>
                        <td>@item.RetailBarcode</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <br />
    @Html.Partial("_AthenaJob", Model)
}
else
{
    <br />
    <p>All items have been processed.</p>
    <form action="@Url.Action("Download", "Athena")" method="post">
        <input type="submit" value="Download XML" class="btn btn-primary" />
    </form>
    <br />
    <form action="@Url.Action("New")" method="post">
        <button class="btn btn-primary" type="submit">Process another job</button>
    </form>
}


<script>
    $(document).ready(function () {
        $('input[name="IsDach"]').change(function () {
            if ($(this).val() === 'true') {
                $('#dachDetails').show();
            } else {
                $('#dachDetails').hide();
            }
        });
    });
</script>


<style>
    /* Set the fixed height and make the table scrollable */
    .table-container {
        height: 150px; /* Adjust the height to your preference */
        overflow-y: scroll; /* Enable vertical scrolling */
        border: 1px solid #ddd; /* Optional border to indicate the scrollable area */
    }

    /* Make columns wider and prevent text wrapping */
    th, td {
        white-space: nowrap; /* Prevent wrapping */
    }

    /* Adjust specific columns */
    th, td {
        overflow: hidden;
        text-overflow: ellipsis; /* Show ellipsis for overflowing content */
    }

    .table {
        table-layout: fixed; /* Ensure the table is responsive */
    }

    /* Custom row highlighting */
    tr[style*="background-color: yellow;"] {
        background-color: yellow !important;
    }

    .grid-container {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr; /* Three equal columns */
        gap: 20px; /* Space between columns */
        align-items: start; /* Align items at the top */
        background-color: lightblue;
    }

    .grid-item {
        background-color: lightblue;
        padding: 20px;
        text-align: left;
    }

        /* Adjust alignment for the info section */
        .grid-item.info-section {
            text-align: right;
            float: right;
        }
</style>

<script>
    function scrollToHighlightedRow() {
        var currentIndex = @currentIndex;
        var highlightedRow = document.getElementById("row-" + currentIndex);

        if (highlightedRow) {
            // Scroll to the highlighted row and ensure it is visible
            highlightedRow.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
    }

    // Call the function on page load
    window.onload = scrollToHighlightedRow;

    // Additionally, you can call scrollToHighlightedRow() whenever you change the highlighted row dynamically
</script>


